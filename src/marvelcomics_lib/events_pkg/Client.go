/*
 * marvelcomics_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 05/25/2016
 */
package events_pkg


import(
	"encoding/json"
	"marvelcomics_lib/models_pkg"
	"github.com/apimatic/unirest-go"
	"marvelcomics_lib"
	"marvelcomics_lib/apihelper_pkg"
)
/*
 * Client structure as interface implementation
 */
type EVENTS_IMPL struct { }

/**
 * Fetches a single event by id.
 * @param    string        eventId     parameter: Required
 * @return	Returns the *models_pkg.Event response from the API call
 */
func (me *EVENTS_IMPL) GetEventIndividual (
            eventId string) (*models_pkg.Event, error) {
        //the base uri for api requests
    _queryBuilder := marvelcomics_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/events/{eventId}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "eventId" : eventId,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "apikey" : marvelcomics_lib.Config.Apikey,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("Event not found.", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.Event = &models_pkg.Event{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Fetches lists of characters filtered by an event id.
 * @param    string         eventId            parameter: Required
 * @param    *string        comics             parameter: Optional
 * @param    *string        limit              parameter: Optional
 * @param    *string        modifiedSince      parameter: Optional
 * @param    *string        name               parameter: Optional
 * @param    *string        nameStartsWith     parameter: Optional
 * @param    *string        offset             parameter: Optional
 * @param    *string        orderBy            parameter: Optional
 * @param    *string        series             parameter: Optional
 * @param    *string        stories            parameter: Optional
 * @return	Returns the *models_pkg.CharacterDataWrapper response from the API call
 */
func (me *EVENTS_IMPL) GetEventCharacterCollection (
            eventId string,
            comics *string,
            limit *string,
            modifiedSince *string,
            name *string,
            nameStartsWith *string,
            offset *string,
            orderBy *string,
            series *string,
            stories *string) (*models_pkg.CharacterDataWrapper, error) {
        //the base uri for api requests
    _queryBuilder := marvelcomics_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/events/{eventId}/characters"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "eventId" : eventId,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "comics" : comics,
        "limit" : limit,
        "modifiedSince" : modifiedSince,
        "name" : name,
        "nameStartsWith" : nameStartsWith,
        "offset" : offset,
        "orderBy" : orderBy,
        "series" : series,
        "stories" : stories,
        "apikey" : marvelcomics_lib.Config.Apikey,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 409) {
        err = apihelper_pkg.NewAPIError("Limit greater than 100.", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CharacterDataWrapper = &models_pkg.CharacterDataWrapper{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Fetches lists of comics filtered by an event id.
 * @param    string                               eventId               parameter: Required
 * @param    *string                              characters            parameter: Optional
 * @param    *string                              collaborators         parameter: Optional
 * @param    *string                              creators              parameter: Optional
 * @param    models_pkg.DateDescriptorEnum        dateDescriptor        parameter: Optional
 * @param    *string                              dateRange             parameter: Optional
 * @param    *string                              diamondCode           parameter: Optional
 * @param    *string                              digitalId             parameter: Optional
 * @param    *string                              ean                   parameter: Optional
 * @param    *string                              events                parameter: Optional
 * @param    *string                              format                parameter: Optional
 * @param    models_pkg.FormatTypeEnum            formatType            parameter: Optional
 * @param    *string                              hasDigitalIssue       parameter: Optional
 * @param    *string                              isbn                  parameter: Optional
 * @param    *string                              issn                  parameter: Optional
 * @param    *string                              issueNumber           parameter: Optional
 * @param    *string                              limit                 parameter: Optional
 * @param    *string                              modifiedSince         parameter: Optional
 * @param    *string                              noVariants            parameter: Optional
 * @param    *string                              offset                parameter: Optional
 * @param    *string                              orderBy               parameter: Optional
 * @param    *string                              series                parameter: Optional
 * @param    *string                              sharedAppearances     parameter: Optional
 * @param    *string                              startYear             parameter: Optional
 * @param    *string                              stories               parameter: Optional
 * @param    *string                              title                 parameter: Optional
 * @param    *string                              titleStartsWith       parameter: Optional
 * @param    *string                              upc                   parameter: Optional
 * @return	Returns the *models_pkg.ComicDataWrapper response from the API call
 */
func (me *EVENTS_IMPL) GetComicsCollectionByEventId (
            eventId string,
            characters *string,
            collaborators *string,
            creators *string,
            dateDescriptor models_pkg.DateDescriptorEnum,
            dateRange *string,
            diamondCode *string,
            digitalId *string,
            ean *string,
            events *string,
            format *string,
            formatType models_pkg.FormatTypeEnum,
            hasDigitalIssue *string,
            isbn *string,
            issn *string,
            issueNumber *string,
            limit *string,
            modifiedSince *string,
            noVariants *string,
            offset *string,
            orderBy *string,
            series *string,
            sharedAppearances *string,
            startYear *string,
            stories *string,
            title *string,
            titleStartsWith *string,
            upc *string) (*models_pkg.ComicDataWrapper, error) {
        //the base uri for api requests
    _queryBuilder := marvelcomics_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/events/{eventId}/comics"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "eventId" : eventId,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "characters" : characters,
        "collaborators" : collaborators,
        "creators" : creators,
        "dateDescriptor" : models_pkg.DateDescriptorEnumToValue(dateDescriptor),
        "dateRange" : dateRange,
        "diamondCode" : diamondCode,
        "digitalId" : digitalId,
        "ean" : ean,
        "events" : events,
        "format" : format,
        "formatType" : models_pkg.FormatTypeEnumToValue(formatType),
        "hasDigitalIssue" : hasDigitalIssue,
        "isbn" : isbn,
        "issn" : issn,
        "issueNumber" : issueNumber,
        "limit" : limit,
        "modifiedSince" : modifiedSince,
        "noVariants" : noVariants,
        "offset" : offset,
        "orderBy" : orderBy,
        "series" : series,
        "sharedAppearances" : sharedAppearances,
        "startYear" : startYear,
        "stories" : stories,
        "title" : title,
        "titleStartsWith" : titleStartsWith,
        "upc" : upc,
        "apikey" : marvelcomics_lib.Config.Apikey,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 409) {
        err = apihelper_pkg.NewAPIError("Limit greater than 100.", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.ComicDataWrapper = &models_pkg.ComicDataWrapper{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Fetches lists of creators filtered by an event id.
 * @param    string         eventId                  parameter: Required
 * @param    *string        comics                   parameter: Optional
 * @param    *string        firstName                parameter: Optional
 * @param    *string        firstNameStartsWith      parameter: Optional
 * @param    *string        lastName                 parameter: Optional
 * @param    *string        lastNameStartsWith       parameter: Optional
 * @param    *string        limit                    parameter: Optional
 * @param    *string        middleName               parameter: Optional
 * @param    *string        middleNameStartsWith     parameter: Optional
 * @param    *string        modifiedSince            parameter: Optional
 * @param    *string        nameStartsWith           parameter: Optional
 * @param    *string        offset                   parameter: Optional
 * @param    *string        orderBy                  parameter: Optional
 * @param    *string        series                   parameter: Optional
 * @param    *string        stories                  parameter: Optional
 * @param    *string        suffix                   parameter: Optional
 * @return	Returns the *models_pkg.CreatorDataWrapper response from the API call
 */
func (me *EVENTS_IMPL) GetCreatorCollectionByEventId (
            eventId string,
            comics *string,
            firstName *string,
            firstNameStartsWith *string,
            lastName *string,
            lastNameStartsWith *string,
            limit *string,
            middleName *string,
            middleNameStartsWith *string,
            modifiedSince *string,
            nameStartsWith *string,
            offset *string,
            orderBy *string,
            series *string,
            stories *string,
            suffix *string) (*models_pkg.CreatorDataWrapper, error) {
        //the base uri for api requests
    _queryBuilder := marvelcomics_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/events/{eventId}/creators"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "eventId" : eventId,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "comics" : comics,
        "firstName" : firstName,
        "firstNameStartsWith" : firstNameStartsWith,
        "lastName" : lastName,
        "lastNameStartsWith" : lastNameStartsWith,
        "limit" : limit,
        "middleName" : middleName,
        "middleNameStartsWith" : middleNameStartsWith,
        "modifiedSince" : modifiedSince,
        "nameStartsWith" : nameStartsWith,
        "offset" : offset,
        "orderBy" : orderBy,
        "series" : series,
        "stories" : stories,
        "suffix" : suffix,
        "apikey" : marvelcomics_lib.Config.Apikey,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 409) {
        err = apihelper_pkg.NewAPIError("Limit greater than 100.", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CreatorDataWrapper = &models_pkg.CreatorDataWrapper{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Fetches lists of series filtered by an event id.
 * @param    string         eventId             parameter: Required
 * @param    *string        characters          parameter: Optional
 * @param    *string        comics              parameter: Optional
 * @param    *string        contains            parameter: Optional
 * @param    *string        creators            parameter: Optional
 * @param    *string        limit               parameter: Optional
 * @param    *string        modifiedSince       parameter: Optional
 * @param    *string        offset              parameter: Optional
 * @param    *string        orderBy             parameter: Optional
 * @param    *string        seriesType          parameter: Optional
 * @param    *string        startYear           parameter: Optional
 * @param    *string        stories             parameter: Optional
 * @param    *string        title               parameter: Optional
 * @param    *string        titleStartsWith     parameter: Optional
 * @return	Returns the *models_pkg.SeriesDataWrapper response from the API call
 */
func (me *EVENTS_IMPL) GetEventSeriesCollection (
            eventId string,
            characters *string,
            comics *string,
            contains *string,
            creators *string,
            limit *string,
            modifiedSince *string,
            offset *string,
            orderBy *string,
            seriesType *string,
            startYear *string,
            stories *string,
            title *string,
            titleStartsWith *string) (*models_pkg.SeriesDataWrapper, error) {
        //the base uri for api requests
    _queryBuilder := marvelcomics_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/events/{eventId}/series"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "eventId" : eventId,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "characters" : characters,
        "comics" : comics,
        "contains" : contains,
        "creators" : creators,
        "limit" : limit,
        "modifiedSince" : modifiedSince,
        "offset" : offset,
        "orderBy" : orderBy,
        "seriesType" : seriesType,
        "startYear" : startYear,
        "stories" : stories,
        "title" : title,
        "titleStartsWith" : titleStartsWith,
        "apikey" : marvelcomics_lib.Config.Apikey,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 409) {
        err = apihelper_pkg.NewAPIError("Limit greater than 100.", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.SeriesDataWrapper = &models_pkg.SeriesDataWrapper{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Fetches lists of stories filtered by an event id.
 * @param    string         eventId           parameter: Required
 * @param    *string        characters        parameter: Optional
 * @param    *string        comics            parameter: Optional
 * @param    *string        creators          parameter: Optional
 * @param    *string        limit             parameter: Optional
 * @param    *string        modifiedSince     parameter: Optional
 * @param    *string        offset            parameter: Optional
 * @param    *string        orderBy           parameter: Optional
 * @param    *string        series            parameter: Optional
 * @return	Returns the *models_pkg.StoryDataWrapper response from the API call
 */
func (me *EVENTS_IMPL) GetEventStoryCollection (
            eventId string,
            characters *string,
            comics *string,
            creators *string,
            limit *string,
            modifiedSince *string,
            offset *string,
            orderBy *string,
            series *string) (*models_pkg.StoryDataWrapper, error) {
        //the base uri for api requests
    _queryBuilder := marvelcomics_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/events/{eventId}/stories"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "eventId" : eventId,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "characters" : characters,
        "comics" : comics,
        "creators" : creators,
        "limit" : limit,
        "modifiedSince" : modifiedSince,
        "offset" : offset,
        "orderBy" : orderBy,
        "series" : series,
        "apikey" : marvelcomics_lib.Config.Apikey,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 409) {
        err = apihelper_pkg.NewAPIError("Limit greater than 100.", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.StoryDataWrapper = &models_pkg.StoryDataWrapper{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Fetches lists of events.
 * @param    *string        characters         parameter: Optional
 * @param    *string        comics             parameter: Optional
 * @param    *string        creators           parameter: Optional
 * @param    *string        limit              parameter: Optional
 * @param    *string        modifiedSince      parameter: Optional
 * @param    *string        name               parameter: Optional
 * @param    *string        nameStartsWith     parameter: Optional
 * @param    *string        offset             parameter: Optional
 * @param    *string        orderBy            parameter: Optional
 * @param    *string        series             parameter: Optional
 * @param    *string        stories            parameter: Optional
 * @return	Returns the *models_pkg.EventDataWrapper response from the API call
 */
func (me *EVENTS_IMPL) GetEventsCollection (
            characters *string,
            comics *string,
            creators *string,
            limit *string,
            modifiedSince *string,
            name *string,
            nameStartsWith *string,
            offset *string,
            orderBy *string,
            series *string,
            stories *string) (*models_pkg.EventDataWrapper, error) {
        //the base uri for api requests
    _queryBuilder := marvelcomics_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/events"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "characters" : characters,
        "comics" : comics,
        "creators" : creators,
        "limit" : limit,
        "modifiedSince" : modifiedSince,
        "name" : name,
        "nameStartsWith" : nameStartsWith,
        "offset" : offset,
        "orderBy" : orderBy,
        "series" : series,
        "stories" : stories,
        "apikey" : marvelcomics_lib.Config.Apikey,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 409) {
        err = apihelper_pkg.NewAPIError("Limit greater than 100.", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.EventDataWrapper = &models_pkg.EventDataWrapper{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

